
\ Protocolo basado en Luz predice recompensa_3perfiles_V1 que a su vez se basa en MEDLab8 Fixed Ratio.mpc

\ Este protocolo no es compatible (de momento) con fixed ratio > 1. Se recompensa 1 NP siguiendo la luz (o alternando) lo que es lo mismo, y en el Probetest se recompensa 1 NP donde sea.


\ Cambios respecto a ese protocolo:
\ - Hay un solo perfil de mov. de luz; el 100% aleatorio.
\ - Luego de un numero D de trials normales (modificable, siendo 10 por defecto)y se pasa a un período de probe test. En los que se ilumina la sala,
\ y todo lo que haga el animal será recomensado, siga o no siga la luz. Serán E trials de probe-test (modificables, por defecto 10) luego de lo cual se vuelve a los normales.
\ La sesión termina luego de entregadas 60 recompensas
\ En pantalla devuelve parametros para poder describir la estrategia del animal, como la aternancia y el seguimiento de luz
\durante probe test y los errores tipo1, 2 y 3.
\ Session time aumentada a 80 minutos para poder agregar mas trials (tiene 60 vs los 50 del entrenamiento)



\ Habria que agregarle las mejoras (que correspondan) que se fueron poniendo a fixed ratio 8 a 10


\ Inputs
^LHOLE  = 1
^RHOLE = 2
^HEAD = 3

\ Outputs
^Pellet     = 3
^LeftLight  = 1
^RightLight = 2
^HouseLight = 7


\ A() = Control Variables with Assigned Aliases as Defined
Var_Alias Correct HOLE (1=Left  2=Right)      = A(0)  \ Default = 1-Left NOSE POKE
Var_Alias Reward (1=Pellet  2=Dipper  3=Drug) = A(1)  \ Default = 1-Pellet
Var_Alias Reward Time (sec)                   = A(2)  \ Default = 0.05 seconds
Var_Alias Time Out Following Reward (sec)     = A(3)  \ Default = 15 seconds
Var_Alias Session Time (min)                  = A(4)  \ Default = 60 minutes
Var_Alias Fixed Ratio Value                   = A(5)  \ Default = 1
Var_Alias Maximum Reinforcers                 = A(6)  \ Default = 60
Var_Alias SoftCR Data Array (1=Yes  0=No)     = A(7)  \ Default = 1-Yes


\ Constants for Control Variables Array
^CorrectNP   = 0
^Reward       = 1
^RewardTime   = 2
^TimeOut      = 3
^SessionTime  = 4
^FRVal        = 5
^MaxReinf     = 6
^SoftCR       = 7
^RewTimeTicks = 8
^TimeOutTicks = 9

\ List Data Variables Here
\  B() = Trial Data
\  B(0)   = Total Responses
\  B(1)   = Total Correct Responses
\  B(2)   = Total Incorrect Responses
\  B(3)   = Numero de trials de probe test que ocurrieron
\  B(4)   =
\  B(J)   = Trial Number
\  B(J+1) = Correct Responses
\  B(J+2) = Incorrect Responses
\  B(J+3) = Pause Time (sec)
\  B(J+4) = Run Time (sec)
\  B(J+5) = Latencia entre que recibe recompenza y que la va a buscar
\  B(J+6) = Pone un 1 si en el trial eligió izquierda y 2 si eligió derecha. Sirve para evaluar alternancia entre trials (evalua en un trial t lo que paso en el B(J-4)  ????
\  B(J+7) = Disponible
\  B(J+8) = Disponible
\  B(J+9) = Disponible

\  C() = IRT Array and Event Pen Code for Soft Cum. Recorder


\   CODIGO PARA INTERPRETAR LA MATRIZ C Y LOS GRAFICOS DEL SOFTCR (decimal en la matriz C; significado; color standar)
\  .10 = NP Correcto durante la fase normal                     ; rojo
\  .11 = NP Incorrecto durante la fase normal                   ; naranja
\  .12 = NP en Magazine hole             ; azul
\  .13 =
\  .14 = NP"correcto" durante TO         ; amarillo amarronado
\  .15 = NP"incorrecto" durante TO       ; celeste verdoso
\  .16 = ComenzÃ³ trial de luz izquierda (izq es correcto)
\  .17 = ComenzÃ³ trial de luz derecha (der es correcto)
\  .18 = comienzo de fase probe
\  .19 = comienzo de fase normal
\  .20 = recibe una recompenza
\  .26 = hace NP izquierdo durante probe y es RECOMEPENSADO
\  .27 = hace NP derecho durante probe y es RECOMEPENSADO
\  .28 = hace NP izquierdo durante TO del probe test
\  .29 = hace NP derecho durante el TO del probe test



\   .51  ; Inicio de TimeOut ; Se lo ve en evento 2 del SoftCR como un incremento respecto a la linea de base
\   .61  ; Fin del TimeOut ; retorno a la linea de base


\  F   = Total Rewards
\  S   = Elapsed Time in Session




\ List Working Variables Here

\  I = Subscript for the IRT Array C
\  J = Subscript for the Trial Array B
\  L = Ratio Count
\  T = Elapsed Time in 0.01 sec Increments for SoftCR Data
\  X = Trial Counter
\  Y = Fixed Ratio Used by Program
\        Updates to new value at START and following Reinforcement

\ P = Nombre de la lista que asiga que luz se va a prender.
\ Q = lleva la info de que luz se prende
\ D = numero de trials normales consecutivos antes de un probe-test, por defecto 10
\ E = numero de trials probe-test consecutivos, por defecto, 10
\ O = va contando cuantros trials normales vá, cuando llega a D, se pasa a probe
\ U = va contando cuantros trials probe-test vá, cuando llega a E, se pasa a trials normales
\ V = Contador de cualtos trials de probe test coincidió con elección de puerto iluminado
\ W = Contador de cuantos trials de probe test alternó
\ K = Errores de no seguir luz pero si alternar
\ M = Errores de no alternar pero si seguir luz
\ N = Error error




DIM A = 9
DIM B = 1000
^CArraySize = 10000  \ Change this Variable also when modifying the C array size.
DIM C = 10000  \ Dimension Array C for 10001 data points.
               \ Under MED-PC Version IV, this array may be
               \ enlarged up to 1 million elements; however,
               \ 10,000 was felt to be adequate for this application.
               \ An end of array seal -987.987 will limit the saved
               \ file to only those elements used during the running
               \ of the procedure.







\ Z-Pulses Used in this Program
^Z_Pellet     = 1   \ Signal Pellet Reinforcement
^Z_Dipper     = 2   \ Signal Dipper Reinforcement
^Z_Pump       = 3   \ Signal Pump Reinforcement
^Z_Correct    = 4   \ Signal Correct Response
^Z_Incorrect  = 5   \ Signal Incorrect Response
^Z_EndTimeOut = 6   \ Signal End of Time Out

\Z9   Para señalizar internamente tiempo máximo que puede tardar en hacer X número de NP
\Z10  Para señalizar internamente tiempo máximo que puede tardar en hacer X número de NP
\Z11  Para señalizar internamente tiempo máximo que puede tardar en hacer X número de NP
\Z12  Señal de que el bicho metio la cabeza en el comedero
\Z13  Se consiguó una recomensa
\Z14  Para contar NP "correctos" durante TO post reward. Entendiedo por "correcto" lo que supo ser correcto hasta el inicio del TO
\Z15  Para contar NP "incorrectos" durante TO post reward. Entendiedo por "incorrecto" lo que supo ser incorrecto hasta el inicio del TO
\Z16  Para indicar que comenzó un trial con luz en la izquierda
\Z17  Para indicar que comenzó un trial con luz en la derecha
\Z18  Para indicar que se pasó a los probe test.
\Z19  Para indicar que se pasó de vuelta a los trial normales
\Z26  Para indicar eleccion de puerto izq en el probe y es recompensado
\Z27  Para indicar eleccion de puerto der en el probe y es recompensdo
\Z28 = hace NP izquierdo durante TO del probe test
\Z29 = hace NP derecho durante el TO del probe test


^Z_End        = 32  \ Signal End of Session

\Luz que se prende:
LIST P = 1, 2
DISKCOLUMNS = 5



\***************************************************
\           MEDLab8 Fixed Ratio Schedule
\  S1 - Set Default Values
\       Correct Lever              (1-Left)
\       Reward Device              (1-Pellet)
\       Reward Time                (0.05 seconds)
\       Time Out Following Reward  (15 seconds)
\       Session Time               (80 minutes)
\       Fixed Ratio Value          (1)
\       Maximum Reinforcers        (60)
\       SoftCR Activation          (1-Yes)
\***************************************************


\ NECESITAMOPS QUE HAYA 2 FASES, LA NORMAL, DONDE LO CORRECTO ES LO QUE DIGA LA LUZ Y LA DE PROBE DONDE LOS 2 SON CORRECTOS!! SIN EMBARGO QUE SE SEÑALICE LO QUE HIZO Y SI SE PUEDE QUE SEA INFORMATIVO DE LA ESTRATEGIA?

S.S.1,
S1,                                                                                     \ OJO QUE ACA CAMBIE ALGO, INVENTÉ A(8), ESTATA BIEN?
  0.01": SET A(^CorrectNP) = 1,  A(^Reward)      = 1,  A(^RewardTime) = 0.05;
         SET A(^TimeOut)    = 15,  A(^SessionTime) = 80, A(^FRVal)      = 1;             \ OJO QUE PUSE TO POST REWARD POR DEFECTO EN 15 SEG
         SET A(^MaxReinf)   = 60, A(^SoftCR)      = 1, A(8) = 1, D = 10, E = 10, O = 0, S = 0;
         SET J = 5, B(J) = -987.987 ---> S2



S2,     \ First Statement: Wait for START signal, turn HouseLight
        \ and associated stimulus ON.
        \
        \ Second Statement: Update screen display with default values
        \ for Control Variables.  This will show any changes made via
        \ the "Configure | Change Variables" Window prior to START.

  #START: CLEAR 1,200;
          SET A(^RewTimeTicks) = A(^RewardTime) * 1";
          SET A(^TimeOutTicks) = A(^TimeOut)    * 1";
          ADD X; SET B(J) = X, B(J+10) = -987.987;
          SET Y = A(^FRVal) ---> S3


 1": SHOW 1,Correct Lever,A(^CorrectNP), 2,Reward Device,A(^Reward),     3,Reward Time,A(^RewardTime);
      SHOW 4,Time Out,A(^TimeOut),         5,Session Time,A(^SessionTime), 6,FR Value,A(^FRVal);
      SHOW 7,Max Reinforcers,A(^MaxReinf), 8,SoftCR Code,A(^SoftCR) ---> SX


S3,

  0.1": OFF ^HouseLight; SET A(^CorrectNP) = Q ---> S4

#Z18: ---> S11

S4,
        \ Control FR here
        \ Wait for Response on Correct Lever
        \ After each Correct Response check if FR has been met
        \ Terminate procedure with Z^Z_End signal from Session Timer

  #RA(^CorrectNP): ADD L; Z^Z_Correct; Z9;  SET B(J+6) = Q ;                            \ L es un contador de NP para ver si se alcanza el FR, aca el FR es 1.
                                                                                        \ Seteo B(J+6) = Q porque si el trial fue correcto me sirve que ponga 1 si era izquierda y 2 si era derecha!

                    IF L >= Y [@FR_Value_Met, @False]
                       @FR_Value_Met: SET L = 0; ZA(^Reward); Z10; Z13 ---> S5
                       @False: ---> SX

  #Z11: SET L = 0 ---> SX
  #R^LHOLE:  Z^Z_Incorrect; SET L = 0 ; IF Q = 1 [@pone2, @pone1]
                        @pone2: SET B(J+6) = 2   ---> S5
                        @pone1: SET B(J+6) = 1   ---> S5

  #R^RHOLE: Z^Z_Incorrect; SET L = 0; IF Q = 1 [@pone2, @pone1]
                        @pone2: SET B(J+6) = 2   ---> S5
                        @pone1: SET B(J+6) = 1   ---> S5
  #Z^Z_End: ---> S8
  #Z18: ---> S11

S5,

0.1": IF A(^TimeOut) > 0 [@True, @False]     \ Si el protocolo contempa TO post reward, sigue un camino, donde luego de X tiempo comienza un nuevo trial; si no hay TO, se espera que el animal vaya al comedero para comenzar otro trial.
            @True: ON ^HouseLight ---> S6
            @False: ON ^HouseLight ---> S10
#Z18: ---> S11

S6,     \ Time Out Interval Following Reward
        \ Reset FR working variable "Y."  This allows the User
        \ to change the value of "A(^FRVal)" while the Animal is
        \ running and have the new value take effect after the
        \ current Ratio is reached.

 A(^TimeOutTicks)#T: Z^Z_EndTimeOut;
                      IF F >= A(^MaxReinf) [@End, @Cont]
                         @End: Z^Z_End ---> S8
                         @Cont: ADD X; SET J = J + 10,    B(J) = X,   B(J+10) = -987.987; SET Y = A(^FRVal) ; OFF ^HouseLight ---> S7

 #Z^Z_End: ---> S8

                                                    \#Z12:  ADD X; SET J = J + 10, B(J) = X,  B(J+10) = -987.987; Z14 ---> S7           \ por que avanza trial (x) con MP????? Yo aca lo cambiaria todo. e incluiria un z_izq y z_derecha para saber qué hizo el animal. LO vos a dejar comentado por las dudas
                                                    \ #RA(^CorrectNP): Z^Z_Correct ---> SX
 #RA(^CorrectNP): Z14 --->  SX
 #R^LHOLE: Z15;  ---> SX
 #R^RHOLE: Z15; ---> SX

 #Z18: ---> S11

S7,

0.2": ---> S3

 #RA(^CorrectNP): Z14 --->    SX
 #R^LHOLE: Z15;  ---> SX
 #R^RHOLE: Z15; ---> SX
 #Z18: ---> S11

S8,
  3": OFF ^HouseLight, ^LeftLight, ^RightLight ---> S8   \quité los calculos de % de correctos e incorrectos porque son OBVIOS y porque necesitaba los slots de B(3) y B(4)


S9,     \ Holding State at End of Session
  1': ---> SX



S10,     \  Si no hay TO lo que hay se hace es exigir que el animal coma del comedero para seguir.

#Z12: OFF ^HouseLight ---> S7
#RA(^CorrectNP): Z14 --->    SX
#R^LHOLE: Z15;  ---> SX
#R^RHOLE: Z15; ---> SX
#Z18: ---> S11

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  PROBE TEST  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



S11,

0.1" ---> S12


S12,

#R^LHOLE: SET B(J+6) = 1; Z26; ADD L; IF L >= Y [@FR_Value_Met, @False]
                            @FR_Value_Met: SET L = 0; ZA(^Reward); Z10; Z13 ---> S13
                            @False: ---> SX





#R^RHOLE:  SET B(J+6) = 2; Z27; ADD L; IF L >= Y [@FR_Value_Met, @False]
                               @FR_Value_Met: SET L = 0; ZA(^Reward); Z10; Z13 ---> S13
                               @False: ---> SX



  #Z^Z_End: ---> S8
  #Z19: ---> S3


S13,

0.1": IF A(^TimeOut) > 0 [@True, @False]     \ Si el protocolo contempa TO post reward, sigue un camino, donde luego de X tiempo comienza un nuevo trial; si no hay TO, se espera que el animal vaya al comedero para comenzar otro trial.
            @True: ON ^HouseLight ---> S14
            @False: ON ^HouseLight ---> S15

#Z19: ---> S3



S14,    \ Time Out Interval Following Reward
        \ Reset FR working variable "Y."  This allows the User
        \ to change the value of "A(^FRVal)" while the Animal is
        \ running and have the new value take effect after the
        \ current Ratio is reached.

 A(^TimeOutTicks)#T: Z^Z_EndTimeOut; OFF ^HouseLight;
                      IF F >= A(^MaxReinf) [@End, @Cont]
                         @End: Z^Z_End ---> S8
                         @Cont: ADD X; SET J = J + 10,    B(J) = X,   B(J+10) = -987.987; SET Y = A(^FRVal) ---> S16

 #Z^Z_End: ---> S8

                                                    \#Z12:  ADD X; SET J = J + 10, B(J) = X,  B(J+10) = -987.987; Z14 ---> S7           \ por que avanza trial (x) con MP????? Yo aca lo cambiaria todo. e incluiria un z_izq y z_derecha para saber qué hizo el animal. LO vos a dejar comentado por las dudas
                                                    \ #RA(^CorrectNP): Z^Z_Correct ---> SX


 #R^LHOLE: Z28;  ---> SX
 #R^RHOLE: Z29; ---> SX

 #Z19: ---> S3


S15,

#Z12 : OFF ^HouseLight ---> S16

#R^LHOLE: Z28;  ---> SX
#R^RHOLE: Z29; ---> SX
#Z19: ---> S3


S16,

0.1": ---> S12


 #R^LHOLE: Z28;  ---> SX
 #R^RHOLE: Z29; ---> SX
 #Z19: ---> S3




\***************************************************
\               CORRECT LEVER COUNTER
\***************************************************

S.S.2,
S1,
  #START: ---> S2

S2,
  #Z^Z_Correct: ADD B(0), B(1), B(J+1) ---> SX
  #Z^Z_End: ---> S1




\***************************************************
\              INCORRECT LEVER COUNTER
\***************************************************
S.S.3,
S1,
  #START: ---> S2

S2,
  #Z^Z_Incorrect: ADD B(0), B(2), B(J+2) ---> SX
  #Z^Z_End: ---> S1



\***************************************************
\                  REWARD COUNTER
\***************************************************
S.S.4,
S1,
  #START: ---> S2

S2,
  #ZA(^Reward): ADD F ---> SX
  #Z^Z_End: ---> S1



\***************************************************
\               REWARD CONTROL TIMER
\***************************************************
S.S.5,
S1,
  #Z^Z_Pellet: ON ^Pellet ---> S2


S2,     \ Time Reward Device for A(^RewardTime) seconds
        \ Default value set in S.S.1, S1 & S2
  A(^RewTimeTicks)#T: OFF ^Pellet,  ---> S1
  #Z^Z_End:           OFF ^Pellet,  ---> S1



\***************************************************
\             PAUSE AND RUN TIME TIMING                       nunca lo usé
\***************************************************
S.S.6,
S1,
  #START: ---> S2

S2,     \ Run Time Starts with the first Correct Lever Press
  #RA(^CorrectNP): ---> S3

S3,     \ Run Time is the amount of time from the first Correct
        \ Lever Press to the last Correct Lever Press when the FR
        \ has been met
        \ With an FR1 this would give a Run Time of 0s
  1": ADD B(J+4) ---> S3
  #Z^Z_End:      ---> S1
  #ZA(^Reward):  ---> S4

S4,     \ Pause Time begins when the Reward has been issued
        \
        \ Wait for the Time Out Interval Following Reward to finish
  1": ADD B(J+3)   ---> S4
  #Z^Z_End:        ---> S1
  #Z^Z_EndTimeOut: ---> S5

S5,     \ Pause Time ends with the first Correct Lever Press
        \ after the Time Out Interval Following Reward
  #RA(^CorrectNP): ---> S3
  1": ADD B(J+3)    ---> S5
  #Z^Z_End:         ---> S1




\**************************************************************************
\   Latencia entre que recibe la recompenza y lo va a buscar  by Juan P
\**************************************************************************


S.S. 7

S1,
    #START: ---> S2

S2,
    #ZA(^Reward): ---> S3

S3,
    #ZA(^Reward):  ---> S4
    1": ADD B(J+5) ---> S3

    #Z12:     ---> S2
    #Z^Z_End: ---> S1
S4,
    0.5": SET B(J+5) =B(J-5); SET B(J-5) = 0 ---> S3



\***************************************************
\     INCREMENT TIME T FOR IRT AND EVENT ARRAY
\***************************************************
S.S.8,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  0.01": ADD T ---> SX
  #Z^Z_End: ---> S1


\***********************************************************
\ ADD A STEP 0 ELEMENT TO ARRAY C FOR EACH CORRECT RESPONSE
\***********************************************************
S.S.9,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z^Z_Correct: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.10, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


\***********************************************************************
\    Para indicar en matriz C NP izquierdos y derechos durante el probe (y saber que hizo el animal!)
\***********************************************************************


S.S.10,

S1,
 #START: ---> S2

S2,                        \ Simplemente esperamos hasta que se entre en probe
 0.1":  ---> SX

 #Z18: ---> S3

S3,

#Z26:  IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.26, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> Sx
                             @False: ---> S1
                   @False: ---> S1

#Z27: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.27, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> SX
                                @False: ---> S1

                     @False: ---> S1

 #ZA(^Reward): ---> S4

S4,

 #Z^Z_EndTimeOut  : ---> S3
 #Z19: ---> S2





\***************************************************
\  ADD A PIP 0 ELEMENT TO ARRAY C FOR EACH REWARD
\***************************************************
S.S.11,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #ZA(^Reward): IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.20, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


\***************************************************************
\ ADD AN EVENT 0 ELEMENT TO ARRAY C FOR EACH INCORRECT RESPONSE
\       ADDITIONAL EVENT ELEMENTS MAY BE ADDED AS NEEDED
\***************************************************************
S.S.12,
S1,
  #START:IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,     \ Raising and lowering the Event line immediately
        \ will create a pip mark on the Event line
  #Z^Z_Incorrect: IF I <= ^CArraySize [@True, @False]
                     @True: SET C(I) = T + 0.11, T = 0; ADD I;
                            IF I <= ^CArraySize [@True, @False]
                               @True: SET C(I) = 0.51; ADD I;
                                      IF I <= ^CArraySize [@True, @False]
                                         @True: SET C(I) = -987.987 ---> S3
                                         @False:---> S1
                               @False:---> S1
                     @False:---> S1


S3,     \ Time Out has Ended
        \ Set Event Pen 1 Down
  #Z^Z_EndTimeOut: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.61, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> S2
                                @False: ---> S1
                      @False: ---> S1


\****************************************************
\ ADD AN EVENT 1 ELEMENT TO ARRAY C FOR THE TIME OUT
\****************************************************
S.S.13,
S1,
  #START:IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,     \ Reward was issued.  Time Out Begins
        \ Set Event Pen 1 Up
  #ZA(^Reward): IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.51, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> S3
                             @False: ---> S1
                   @False: ---> S1

S3,     \ Time Out has Ended
        \ Set Event Pen 1 Down
  #Z^Z_EndTimeOut: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.61, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> S2
                                @False: ---> S1
                      @False: ---> S1


\***************************************************
\                  UPDATE DISPLAY
\***************************************************
S.S.14,
S1,
  #START: SHOW 2,Tot Cor Rsp,B(1),  3,Tot Incor Rsp,B(2), 4,Tot Rewards,F,   5,Trials Probe, B(3);
          SHOW 6,Trial #,B(J),      7,Cor Rsp,B(J+1),     8,Incor Rsp,B(J+2);
          SHOW 9,Pause Time,B(J+3), 10,Run Time,B(J+4), 11, Buscar Recomp, H , 12, Contador, L , 13 , J , J;
          SHOW 14, SeguimientoLuz, V, 15, Alternancia, W, 16, Error1, K, 17, Error2, M, 18, Error3, N  ---> S2
     \     SHOW 19, %SeguimientoLuz,  V/B(3)*100    , 20,  %Alternancia, W/B(3)*100, 21, Error1, K/B(3)*100 , 22, Error2,  M/B(3)*100 , 23, N/B(3)*100  ---> S2      Creo que no se pueden hacer calculos aca




S2,
  1": SHOW 2,Tot Cor Rsp,B(1),  3,Tot Incor Rsp,B(2), 4,Tot Rewards,F,   5,Trials Probe, B(3);
      SHOW 6,Trial #,B(J),      7,Cor Rsp,B(J+1),     8,Incor Rsp,B(J+2);
      SHOW 9,Pause Time,B(J+3), 10,Run Time,B(J+4), 11, Buscar Recomp, H,  12, Contador, L , 13 , J , J;
      SHOW 14, SeguimientoLuz, V, 15, Alternancia, W, 16, Error1, K, 17, Error2, M, 18, Error3, N ---> SX
      \ SHOW 19, %SeguimientoLuz,  V/B(3)*100    , 20,  %Alternancia, W/B(3)*100, 21, Error1, K/B(3)*100 , 22, Error2,  M/B(3)*100 , 23, N/B(3)*100  ---> SX



\*****************************************************
\            Resetea el número de Nose Pokes si tarda mucho
\            Los animales tiene M segundos (default 15) para hacer el L numero de NP (default, 1)
\            (modificable cambiando M)
\*****************************************************     QUEDA MEDIO AL PEDO ESTO EN FIXED RATIO 1
\ S.S.15,
\ S1,
\ #Z9: ADD G;
\       IF G=1 [@Tiempo, @Nada]
\        @Tiempo: SET M  = 15" ---> S2
\        @Nada: ---> SX
\ #Z10: SET G=0  ---> SX
\ S2,
\
\
\ M#T: Z11; SET G = 0 ---> S1

\***************************************************
\        Contador de metidas de cabeza
\***************************************************

S.S.15,
S1,
#START: --->S2

S2,
 1": SHOW 11, Buscar Recomp, H ---> S3

S3,
 1#R3: ADD H; SHOW 11, Buscar Recomp, H; Z12 ---> S4

S4,
 0.15":---> S3


\***********************************************************************
\ ADD A PIP 0 ELEMENT TO ARRAY C FOR cada entrada de cabeza
\***********************************************************************


S.S.16,

S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z12: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.12, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1




\***********************************************************************
\    Cosas del SoftCR para los NP durante el TO
\***********************************************************************

S.S.17,

S1,

  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,
  #Z14: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.14, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


S.S.18,
S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,
  #Z15: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.15, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1




\***************************************************
\                 Control de la Luz
\***************************************************
S.S.19,
S1,
#START: RANDI Q = P;                                              \ Se comienza con trials normales, de 100% de alternancia. Hay que un contador determina que se llegó a D (default 10)
        IF Q = 1 [@Luz Izq, @Luz Der]
                   @Luz Izq: ON ^LeftLight; Z16  ---> S3
                   @Luz Der: ON ^RightLight; Z17 ---> S7

S2,                                                                     \  S2 no se está usando pero yafu

0.01": RANDI Q = P;
        IF Q = 1 [@Luz Izq, @Luz Der]
                   @Luz Izq: ON ^LeftLight; Z16  ---> S3
                   @Luz Der: ON ^RightLight; Z17 ---> S7

#Z^Z_End:  ---> S16

S3,
    #Z13: ADD O; OFF ^LeftLight ---> S4                                  \ Saque ADD O de S1 y S5 (cuando se entra en el trial) y lo puse cuando se recompensa para que se asi se pase a probe luego de D trials correctos y no luego de D trials cualesean.
    #Z^Z_Incorrect: OFF ^LeftLight ---> S4

#Z^Z_End:  ---> S16

S4,
    0.1":  IF A(^TimeOut) > 0 [@True, @False]
            @True:  ---> S5
            @False:  ---> S6


S5,
#Z^Z_EndTimeOut: IF O = D [@Probe, @Normal]
                                @Probe: SET O = 0; Z18 ---> S11
                                @Normal: SET Q = 2;  ON ^RightLight; Z17 ---> S7

#Z^Z_End:  ---> S16
                                  \ Si hay TO, se espera al fin del TO; si no hay, se espera MP

S6,
#Z12: IF O = D [@Probe, @Normal]
                        @Probe: SET O = 0; Z1 ---> S11
                        @Normal: SET Q = 2;  ON ^RightLight; ADD O; Z17 ---> S7

#Z^Z_End:  ---> S16

S7,

#Z13: ADD O; OFF ^RightLight ---> S8
#Z^Z_Incorrect: OFF ^RightLight ---> S8

#Z^Z_End:  ---> S16

S8,
    0.1":  IF A(^TimeOut) > 0 [@True, @False]
            @True: ---> S9
            @False: ---> S10

S9,
#Z^Z_EndTimeOut: IF O = D [@Probe, @Normal]
                                @Probe: SET O = 0; Z18 ---> S11
                                @Normal: SET Q = 1; ON ^LeftLight; Z16 ---> S3

#Z^Z_End:  ---> S16
                                                                                        \ Si hay TO, se espera al fin del TO; si no hay, se espera MP

S10,
#Z12: OFF ^HouseLight; IF O = D [@Probe, @Normal]
                    @Probe: SET O = 0; Z1 ---> S11
                    @Normal: SET Q = 1; ON ^LeftLight; Z16; ADD O ---> S3

#Z^Z_End:  ---> S16

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ACA VIENE EL PROBE-TEST \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


S11,
0.1": ADD U; RANDI Q = P;                                                         \ segun simulaciones, con este protocolo hay una alternancia del 50%
        IF Q = 1 [@Luz Izq, @Luz Der]                                             \ Muestreo con reposicion de un pool [1, 2]
                   @Luz Izq: ON ^LeftLight; Z16; ADD B(3)  ---> S12
                   @Luz Der: ON ^RightLight; Z17; ADD B(3) ---> S12

#Z^Z_End:  ---> S16

S12,
 #Z13: OFF ^RightLight; OFF ^LeftLight ---> S13


#Z^Z_End:  ---> S16

S13,
 0.1":  IF A(^TimeOut) > 0 [@True, @False]
            @True: ---> S14
            @False: ---> S15

S14,
#Z^Z_EndTimeOut: IF U = E [@AbandonaProbe, @Sigue]
                            @AbandonaProbe: IF Q = 1 [@SeVuelveConDer, @SeVuelveConIzq]
                                @SeVuelveConDer: SET U = 0; Z19 ; SET Q = 2; ON ^RightLight; Z17 ---> S7
                                @SeVuelveConIzq: SET U = 0; Z19 ; SET Q = 1; ON ^LeftLight; Z16  ---> S3
                            @Sigue: ADD U; RANDI Q = P; ADD B(3);
                                IF Q = 1 [@Luz Izq, @Luz Der]
                                        @Luz Izq: ON ^LeftLight; Z16    ---> S12
                                        @Luz Der: ON ^RightLight; Z17    ---> S12

#Z^Z_End:  ---> S16

S15,
#Z12: IF U = E [@AbandonaProbe, @Sigue]
                            @AbandonaProbe: IF Q = 1 [@SeVuelveConDer, @SeVuelveConIzq]
                                @SeVuelveConDer: SET U = 0; Z19 ; SET Q = 2; ON ^RightLight; Z17 ---> S7
                                @SeVuelveConIzq: SET U = 0; Z19 ; SET Q = 1; ON ^LeftLight; Z16 ---> S3
                            @Sigue: ADD U; RANDI Q = P;
                                IF Q = 1 [@Luz Izq, @Luz Der]
                                        @Luz Izq: ON ^LeftLight; Z16    ---> S12
                                        @Luz Der: ON ^RightLight; Z17    ---> S12

#Z^Z_End:  ---> S16

S16,

1" ---> SX










\***********************************************************************
\    Para indicar en matriz C el comienzo de fase normal y fase probe
\***********************************************************************

S.S.20,

S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX
S2,
 #Z18: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.18, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> Sx
                             @False: ---> S1
                   @False: ---> S1

 #Z19: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.19, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> SX
                                @False: ---> S1

                     @False: ---> S1




\***********************************************************************
\    Para indicar en matriz C que el trial que comenzó será de luz IZQUIERDA o DERECHA
\***********************************************************************

S.S.21,

S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX
S2,
 #Z16: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.16, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> Sx
                             @False: ---> S1
                   @False: ---> S1

 #Z17: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.17, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> SX
                                @False: ---> S1

                     @False: ---> S1

\***********************************************************************
\    Para indicar en matriz C que hizo el animal durante el probe test
\***********************************************************************

S.S.22,

S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX
S2,
 #Z28: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.28, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> Sx
                             @False: ---> S1
                   @False: ---> S1

 #Z29: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.29, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> SX
                                @False: ---> S1

                     @False: ---> S1



\***************************************************
\                   Parametros para evaluacion de estrategia
\***************************************************

S.S.23,

S1,
 #START: ---> S2

S2,                        \ Simplemente esperamos hasta que se entre en probe
 0.1":  ---> SX

 #Z18: ---> S3

S3,


#R^LHOLE: IF Q = 1 [@ConicideConLuz, @NoCoicide]
                    @ConicideConLuz: ADD V; IF B(J-4) = 2 [@Alterna, @NoAlterna]
                                                              @Alterna: ADD W ---> SX
                                                              @NoAlterna: ADD M ---> SX


                    @NoCoicide: IF B(J-4) = 2 [@Alterna, @NoAlterna]
                                                              @Alterna: ADD W,  K ---> SX
                                                              @NoAlterna: ADD N ---> SX



#R^RHOLE: IF Q = 2 [@ConicideConLuz, @NoCoicide]
                    @ConicideConLuz: ADD V; IF B(J-4) = 1 [@Alterna, @NoAlterna]
                                                              @Alterna: ADD W ---> SX
                                                              @NoAlterna: ADD M ---> SX

                    @NoCoicide: IF B(J-4) = 1 [@Alterna, @NoAlterna]
                                                              @Alterna: ADD W, K ---> SX
                                                              @NoAlterna: ADD N---> SX





 #Z19: ---> S2

 #ZA(^Reward): ---> S4




S4,

 #Z^Z_EndTimeOut  : ---> S3
 #Z19: ---> S2





\***************************************************
\                   SESSION CLOCK
\***************************************************
S.S.24,
S1,
  #START: SHOW 1,Session,S/60 ---> S2

S2,
  1": ADD S; SHOW 1,Session,S/60;
      IF S/60 >= A(^SessionTime) [@EndSession, @ContinueTiming]
         @End: Z^Z_End ---> S3
         @Cont: ---> SX
  #Z^Z_End: ---> S3

S3,     \ Wait for Screen Update and end with
        \ STOPABORTFLUSH for Automatic Data Saving
  2": ---> STOPABORTFLUSH





