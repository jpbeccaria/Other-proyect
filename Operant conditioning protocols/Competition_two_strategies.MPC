\ DESCRIPTION:
\ In the literature there are no operant conditioning tasks that evaluate competition between strategies. We set out to make one!
\ A operant conditioning box with 2 nose-poke ports with asociated light is requiered.
\ Only one port will be rewarded per trial. The rewarded port can be recognized because the light indicates it. 
\ The light alternates right-left-right, in each trial. Therefore, two strategies lead to the reward: follow the light or adopt a "win-shift" strategy.
\ Since the behavior of the animals do not indicate which strategy was chosen, a probe-test day is required to do so.

\ Inputs
^LHOLE  = 1
^RHOLE = 2
^HEAD = 3

\ Outputs
^Pellet     = 3
^LeftLight  = 1
^RightLight = 2
^HouseLight = 7


\ A() = Control Variables with Assigned Aliases as Defined
Var_Alias Correct HOLE (1=Left  2=Right)      = A(0)  \ Default = 1-Left NOSE POKE
Var_Alias Reward (1=Pellet  2=Dipper  3=Drug) = A(1)  \ Default = 1-Pellet
Var_Alias Reward Time (sec)                   = A(2)  \ Default = 0.05 seconds
Var_Alias Time Out Following Reward (sec)     = A(3)  \ Default = 15 seconds
Var_Alias Session Time (min)                  = A(4)  \ Default = 60 minutes
Var_Alias Fixed Ratio Value                   = A(5)  \ Default = 1
Var_Alias Maximum Reinforcers                 = A(6)  \ Default = 50
Var_Alias SoftCR Data Array (1=Yes  0=No)     = A(7)  \ Default = 1-Yes
Var_Alias Perfil de alternancia  (1=Alternancia50  2=Intermedia 3= Alternancia100)      = A(10)  \ Default = 1

\ Constants for Control Variables Array
^CorrectNP   = 0
^Reward       = 1
^RewardTime   = 2
^TimeOut      = 3
^SessionTime  = 4
^FRVal        = 5
^MaxReinf     = 6
^SoftCR       = 7
^RewTimeTicks = 8
^TimeOutTicks = 9
^PerfilAlter = 10


\ List Data Variables Here
\  B() = Trial Data
\  B(0)   = Total Responses
\  B(1)   = Total Correct Responses
\  B(2)   = Total Incorrect Responses
\  B(3)   =
\  B(4)   =
\  B(J)   = Trial Number
\  B(J+1) = Correct Responses
\  B(J+2) = Incorrect Responses
\  B(J+3) = Pause Time (sec)
\  B(J+4) = Run Time (sec)
\  B(J+5) = Latencia entre que recibe recompenza y que la va a buscar
\  B(J+6) = Disponible
\  B(J+7) = Disponible
\  B(J+8) = Disponible
\  B(J+9) = Disponible

\  C() = IRT Array and Event Pen Code for Soft Cum. Recorder

\ ACA HABRIA QUE IR PONIENDO LOS .XX QUE QUE SE VAN CARGANDO EN C
\   CODIGO PARA INTERPRETAR LA MATRIZ C Y LOS GRAFICOS DEL SOFTCR (decimal en la matriz C; significado; color standar)
\  .10 = NP Correcto                     ; rojo
\  .11 = NP Incorrecto                   ; naranja
\  .12 = NP en Magazine hole             ; azul

\  .13 =
\  .14 = NP"correcto" durante TO         ; amarillo amarronado
\  .15 = NP"incorrecto" durante TO       ; celeste verdoso
\  .16 = ComenzÃ³ trial de luz izquierda (izq es correcto)
\  .17 = ComenzÃ³ trial de luz derecha (der es correcto)
\  .18 = Se prende la luz izquierda
\  .19 = Se prende la luz derecha

\   .51  ; Inicio de TimeOut ; Se lo ve en evento 2 del SoftCR como un incremento respecto a la linea de base
\   .61  ; Fin del TimeOut ; retorno a la linea de base


\  F   = Total Rewards
\  S   = Elapsed Time in Session




\ List Working Variables Here

\  I = Subscript for the IRT Array C
\  J = Subscript for the Trial Array B
\  L = Ratio Count
\  T = Elapsed Time in 0.01 sec Increments for SoftCR Data
\  X = Trial Counter
\  Y = Fixed Ratio Used by Program
\  Updates to new value at START and following Reinforcement

\ P = Nombre de la lista que asiga que luz se va a prender.
\ Q = lleva la info de que luz se prende

\ D = delay entre que comienza el trial nuevo y se prende la luz, dejando una ventana de oportunidad para que
\los animales que alternen tengan una venjataja

DIM A = 10
DIM B = 1000
^CArraySize = 10000  \ Change this Variable also when modifying the C array size.
DIM C = 10000  \ Dimension Array C for 10001 data points.
               \ Under MED-PC Version IV, this array may be
               \ enlarged up to 1 million elements; however,
               \ 10,000 was felt to be adequate for this application.
               \ An end of array seal -987.987 will limit the saved
               \ file to only those elements used during the running
               \ of the procedure.







\ Z-Pulses Used in this Program
^Z_Pellet     = 1   \ Signal Pellet Reinforcement
^Z_Dipper     = 2   \ Signal Dipper Reinforcement
^Z_Pump       = 3   \ Signal Pump Reinforcement
^Z_Correct    = 4   \ Signal Correct Response
^Z_Incorrect  = 5   \ Signal Incorrect Response
^Z_EndTimeOut = 6   \ Signal End of Time Out

\Z9   Para seÃ±alizar internamente tiempo mÃ¡ximo que puede tardar en hacer X nÃºmero de NP
\Z10  Para seÃ±alizar internamente tiempo mÃ¡ximo que puede tardar en hacer X nÃºmero de NP
\Z11  Para seÃ±alizar internamente tiempo mÃ¡ximo que puede tardar en hacer X nÃºmero de NP
\Z12  SeÃ±al de que el bicho metio la cabeza en el comedero
\Z13  Se consiguÃ³ una recomensa
\Z14  Para contar NP "correctos" durante TO post reward. Entendiedo por "correcto" lo que supo ser correcto hasta el inicio del TO
\Z15  Para contar NP "incorrectos" durante TO post reward. Entendiedo por "incorrecto" lo que supo ser incorrecto hasta el inicio del TO
\Z16  Para indicar que comenzÃ³ un trial con luz en la izquierda
\Z17  Para indicar que comenzÃ³ un trial con luz en la derecha

^Z_End        = 32  \ Signal End of Session

\Luz que se prende:
LIST P = 1, 2
DISKCOLUMNS = 5



\***************************************************
\           MEDLab8 Fixed Ratio Schedule
\  S1 - Set Default Values
\       Correct Lever              (1-Left)
\       Reward Device              (1-Pellet)
\       Reward Time                (0.05 seconds)
\       Time Out Following Reward  (15 seconds)
\       Session Time               (60 minutes)
\       Fixed Ratio Value          (1)
\       Maximum Reinforcers        (50)
\       SoftCR Activation          (1-Yes)
\***************************************************

S.S.1,
S1,
  0.01": SET A(^CorrectNP) = 1,  A(^Reward)      = 1,  A(^RewardTime) = 0.05;
         SET A(^TimeOut)    = 15,  A(^SessionTime) = 60, A(^FRVal)      = 1;             \OJO: QUE PUSE TO POST REWARD POR DEFECTO EN 15 SEG
         SET A(^MaxReinf)   = 50, A(^SoftCR)      = 1, A(^PerfilAlter) = 3;             \  PUSE PERFIL POR DEFECTO 3
         SET J = 5,  D = 3, B(J) = -987.987 ---> S2                                    \  PUSE delay de prendido de luz (D) POR DEFECTO 3 seg



S2,     \ First Statement: Wait for START signal, turn HouseLight
        \ and associated stimulus ON.
        \
        \ Second Statement: Update screen display with default values
        \ for Control Variables.  This will show any changes made via
        \ the "Configure | Change Variables" Window prior to START.

  #START: CLEAR 1,200;
          SET A(^RewTimeTicks) = A(^RewardTime) * 1";
          SET A(^TimeOutTicks) = A(^TimeOut)    * 1";
          ADD X; SET B(J) = X, B(J+10) = -987.987;
          SET Y = A(^FRVal) , D = D * 1" ---> S3


 1": SHOW 1,Perfil, A(^PerfilAlter), 2, Reward Device, A(^Reward),     3, Reward Time, A(^RewardTime);
     SHOW 4, Time Out,A(^TimeOut), 5, Session Time, A(^SessionTime), 6, FR Value,A(^FRVal);
     SHOW 7, Max Reinforcers, A(^MaxReinf), 8, Perfil, A(^PerfilAlter)  ---> SX


S3,

  0.1": SET A(^CorrectNP) = Q ---> S11


S4,
        \ Control FR here
        \ Wait for Response on Correct Lever
        \ After each Correct Response check if FR has been met
        \ Terminate procedure with Z^Z_End signal from Session Timer

  #RA(^CorrectNP): ADD L; Z^Z_Correct; Z9;                              \ L es un contador de NP para ver si se alcanza el FR, aca el FR es 1.


                    IF L >= Y [@FR_Value_Met, @False]
                       @FR_Value_Met: SET L = 0; ZA(^Reward); Z10; Z13 ---> S5
                       @False: ---> SX

  #Z11: SET L=0 ---> SX
  #R^LHOLE:  Z^Z_Incorrect; SET L = 0 ---> S5
  #R^RHOLE: Z^Z_Incorrect; SET L = 0 ---> S5
  #Z^Z_End: ---> S8


S5,
                                                 \ Si el protocolo contempa TO post reward, sigue un camino, donde luego de X tiempo comienza un nuevo trial; si no hay TO, se espera que el animal vaya al comedero para comenzar otro trial.
0.1": IF A(^TimeOut) > 0 [@True, @False]
            @True: ON ^HouseLight ---> S6
            @False: ---> S10


S6,     \ Time Out Interval Following Reward
        \ Reset FR working variable "Y."  This allows the User
        \ to change the value of "A(^FRVal)" while the Animal is
        \ running and have the new value take effect after the
        \ current Ratio is reached.

 A(^TimeOutTicks)#T: Z^Z_EndTimeOut;
                     IF F >= A(^MaxReinf) [@End, @Cont]
                         @End: Z^Z_End; OFF ^HouseLight ---> S8
                         @Cont: ADD X; SET J = J + 10,    B(J) = X,   B(J+10) = -987.987; SET Y = A(^FRVal); OFF ^HouseLight ---> S7

 #Z^Z_End: ---> S8


 #RA(^CorrectNP): Z14 --->  SX
 #R^LHOLE: Z15  ---> SX
 #R^RHOLE: Z15 ---> SX

S7,

 0.2": ---> S3

 #RA(^CorrectNP): Z14 ---> SX
 #R^LHOLE: Z15  ---> SX
 #R^RHOLE: Z15 ---> SX


S8,     \ End of Session - Turn Lights Off
        \ Calculate % Correct and % Incorrect
  3": OFF ^HouseLight, ^LeftLight, ^RightLight ---> S8


S9,     \ Holding State at End of Session
  1': ---> SX


S10,

#Z12 ---> S7
#RA(^CorrectNP): Z14 --->    SX
#R^LHOLE: Z15  ---> SX
#R^RHOLE: Z15 ---> SX

S11,      \ paso intermediario solo para que las cosas carguen bien

0.01": ---> S4

\***************************************************
\               CORRECT LEVER COUNTER
\***************************************************
                                                                \ este casette parece un poco al pedo, no se puede mterar aca tambien lo de la matriz C?
S.S.2,
S1,
  #START: ---> S2

S2,
  #Z^Z_Correct: ADD B(0), B(1), B(J+1) ---> SX
  #Z^Z_End: ---> S1




\***************************************************
\              INCORRECT LEVER COUNTER
\***************************************************
S.S.3,
S1,
  #START: ---> S2

S2,
  #Z^Z_Incorrect: ADD B(0), B(2), B(J+2) ---> SX
  #Z^Z_End: ---> S1




\***************************************************
\                  REWARD COUNTER
\***************************************************
S.S.4,
S1,
  #START: ---> S2

S2,
  #ZA(^Reward): ADD F ---> SX
  #Z^Z_End: ---> S1



\***************************************************
\               REWARD CONTROL TIMER
\***************************************************
S.S.5,
S1,
  #Z^Z_Pellet: ON ^Pellet ---> S2


S2,     \ Time Reward Device for A(^RewardTime) seconds
        \ Default value set in S.S.1, S1 & S2
  A(^RewTimeTicks)#T: OFF ^Pellet,  ---> S1
  #Z^Z_End:           OFF ^Pellet,  ---> S1



\***************************************************
\             PAUSE AND RUN TIME TIMING                       nunca lo usÃ©
\***************************************************
S.S.6,
S1,
  #START: ---> S2

S2,     \ Run Time Starts with the first Correct Lever Press
  #RA(^CorrectNP): ---> S3

S3,     \ Run Time is the amount of time from the first Correct
        \ Lever Press to the last Correct Lever Press when the FR
        \ has been met
        \ With an FR1 this would give a Run Time of 0s
  1": ADD B(J+4) ---> S3
  #Z^Z_End:      ---> S1
  #ZA(^Reward):  ---> S4

S4,     \ Pause Time begins when the Reward has been issued
        \
        \ Wait for the Time Out Interval Following Reward to finish
  1": ADD B(J+3)   ---> S4
  #Z^Z_End:        ---> S1
  #Z^Z_EndTimeOut: ---> S5

S5,     \ Pause Time ends with the first Correct Lever Press
        \ after the Time Out Interval Following Reward
  #RA(^CorrectNP): ---> S3
  1": ADD B(J+3)    ---> S5
  #Z^Z_End:         ---> S1




\**************************************************************************
\   Latencia entre que recibe la recompenza y lo va a buscar  by Juan P
\**************************************************************************


S.S. 7

S1,
    #START: ---> S2

S2,
    #ZA(^Reward): ---> S3

S3,
    #ZA(^Reward):  ---> S4
    1": ADD B(J+5) ---> S3

    #Z12:     ---> S2
    #Z^Z_End: ---> S1
S4,
    0.5": SET B(J+5) =B(J-5); SET B(J-5) = 0 ---> S3



\***************************************************
\     INCREMENT TIME T FOR IRT AND EVENT ARRAY
\***************************************************
S.S.8,
S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,
  0.01": ADD T ---> SX
  #Z^Z_End: ---> S1


\***********************************************************
\ ADD A STEP 0 ELEMENT TO ARRAY C FOR EACH CORRECT RESPONSE
\***********************************************************
S.S.9,
S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,
  #Z^Z_Correct: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.10, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


\***************************************************
\  ADD A PIP 0 ELEMENT TO ARRAY C FOR EACH REWARD
\***************************************************
S.S.10,
S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,
  #ZA(^Reward): IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.20, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


\***************************************************************
\ ADD AN EVENT 0 ELEMENT TO ARRAY C FOR EACH INCORRECT RESPONSE
\       ADDITIONAL EVENT ELEMENTS MAY BE ADDED AS NEEDED
\***************************************************************
S.S.11,
S1,
  #START:IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,     \ Raising and lowering the Event line immediately
        \ will create a pip mark on the Event line
  #Z^Z_Incorrect: IF I <= ^CArraySize [@True, @False]
                     @True: SET C(I) = T + 0.11, T = 0; ADD I;
                            IF I <= ^CArraySize [@True, @False]
                               @True: SET C(I) = 0.51; ADD I;
                                      IF I <= ^CArraySize [@True, @False]
                                         @True: SET C(I) = -987.987 ---> S3
                                         @False:---> S1
                               @False:---> S1
                     @False:---> S1


S3,     \ Time Out has Ended
        \ Set Event Pen 1 Down
  #Z^Z_EndTimeOut: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.61, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> S2
                                @False: ---> S1
                      @False: ---> S1



\****************************************************
\ ADD AN EVENT 1 ELEMENT TO ARRAY C FOR THE TIME OUT
\****************************************************
S.S.12,
S1,
  #START:IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,     \ Reward was issued.  Time Out Begins
        \ Set Event Pen 1 Up
  #ZA(^Reward): IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.51, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> S3
                             @False: ---> S1
                   @False: ---> S1

S3,     \ Time Out has Ended
        \ Set Event Pen 1 Down
  #Z^Z_EndTimeOut: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.61, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> S2
                                @False: ---> S1
                      @False: ---> S1


\***************************************************
\                  UPDATE DISPLAY
\***************************************************
S.S.13,
S1,
  #START: SHOW 2,Tot Cor Rsp,B(1),  3,Tot Incor Rsp,B(2), 4,Tot Rewards,F,   5,Perfil, A(^PerfilAlter);
          SHOW 6,Trial #,B(J),      7,Cor Rsp,B(J+1),     8,Incor Rsp,B(J+2);
          SHOW 9,Pause Time,B(J+3), 10,Run Time,B(J+4), 11, Buscar Recomp, H , 12, Contador, L , 13 , J , J;
          SHOW 14, fue corr ,B(J+6) ---> S2

S2,
  1": SHOW 2,Tot Cor Rsp,B(1),  3,Tot Incor Rsp,B(2), 4,Tot Rewards,F,   5,Perfil, A(^PerfilAlter);
      SHOW 6,Trial #,B(J),      7,Cor Rsp,B(J+1),     8,Incor Rsp,B(J+2);
      SHOW 9,Pause Time,B(J+3), 10,Run Time,B(J+4), 11, Buscar Recomp, H,  12, Contador, L , 13 , J , J;
          SHOW 14, fue corr ,B(J+6) ---> S2



\*****************************************************
\            Resetea el nÃºmero de Nose Pokes si tarda mucho
\            Los animales tiene M segundos (default 15) para hacer el L numero de NP (default, 1)
\            (modificable cambiando M)
\*****************************************************                                                    \ Esta fallando la compilacion , por las dudas achicamos el protocolo
\ S.S.14,
\ S1,
\ #Z9: ADD G;
\       IF G=1 [@Tiempo, @Nada]
\        @Tiempo: SET M  = 15" ---> S2
\        @Nada: ---> SX
\ #Z10: SET G=0  ---> SX
\ S2,
\ M#T: Z11; SET G = 0 ---> S1

\***************************************************
\        Contador de metidas de cabeza
\***************************************************

S.S.15,
S1,
#START: --->S2

S2,
 1": SHOW 11, Buscar Recomp, H ---> S3

S3,
 1#R3: ADD H; SHOW 11, Buscar Recomp, H; Z12 ---> S4

S4,
 0.15":---> S3


\***********************************************************************
\ ADD A PIP 0 ELEMENT TO ARRAY C FOR cada entrada de cabeza
\***********************************************************************


S.S.16,

S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,
  #Z12: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.12, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


\***********************************************************************
\    Cosas del SoftCR para los NP durante el TO
\***********************************************************************

S.S.17,
S1,

  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,
  #Z14: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.14, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


S.S.18,
S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX

S2,
  #Z15: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.15, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1



\***************************************************
\                 Control de la Luz (en Ver 3 se agrego el delay D)
\***************************************************

S.S.19,
S1,

#START: IF A(^PerfilAlter) = 1 [@Perfil1, @Ver]
                        @Perfil1: ---> S2
                        @Ver: IF A(^PerfilAlter) = 2 [@Perfil2, @Perfil3]
                                           @Perfil2: ---> S7
                                           @Perfil3: ---> S12



S2,                                                                        \  PERFIL 1

0.01":RANDI Q = P;                                                          \ segun simulaciones, con este protocolo hay una alternancia del 50%
        IF Q = 1 [@Luz Izq, @Luz Der]                                      \ Muestreo con reposicion de un pool [1, 2]
                   @Luz Izq: ON ^LeftLight; Z16  ---> S3
                   @Luz Der: ON ^RightLight; Z17 ---> S3

S3,
 #Z13: OFF ^RightLight; OFF ^LeftLight ---> S4
 #Z^Z_Incorrect:  OFF ^RightLight; OFF ^LeftLight ---> S4


S4,
 0.01":  IF A(^TimeOut) > 0 [@True, @False]
            @True: ---> S5
            @False: ---> S6

S5,
#Z^Z_EndTimeOut: RANDI Q = P;                                              \ Si hay TO, se espera al fin del TO; si no hay, se espera MP
    IF Q = 1 [@Luz Izq, @Luz Der]
                   @Luz Izq: ON ^LeftLight; Z16    ---> S3
                   @Luz Der: ON ^RightLight; Z17      ---> S3

S6,
#Z12: RANDI Q = P;
    IF Q = 1 [@Luz Izq, @Luz Der]
                   @Luz Izq: ON ^LeftLight; Z16    ---> S3
                   @Luz Der: ON ^RightLight; Z17      ---> S3



S7,                                                                         \  PERFIL 2

 0.01":RANDD Q = P;                                                          \segun simulaciones, con este protocolo hay una alternancia del 75%
        IF Q = 1 [@Luz Izq, @Luz Der]                                       \ muestreo sin reposicion de un pool de solo [1, 2]
                   @Luz Izq: ON ^LeftLight; Z16  ---> S8
                   @Luz Der: ON ^RightLight; Z17 ---> S8




S8,
    #Z13: OFF ^RightLight; OFF ^LeftLight ---> S9
    #Z^Z_Incorrect:  OFF ^RightLight; OFF ^LeftLight ---> S9



S9,
0.01":  IF A(^TimeOut) > 0 [@True, @False]
            @True: ---> S10
            @False: ---> S11


S10,
#Z^Z_EndTimeOut: RANDD Q = P;                                              \ Si hay TO, se espera al fin del TO; si no hay, se espera MP
    IF Q = 1 [@Luz Izq, @Luz Der]
                   @Luz Izq: ON ^LeftLight; Z16       ---> S8
                   @Luz Der: ON ^RightLight; Z17      ---> S8


S11,
#Z12: RANDD Q = P;
    IF Q = 1 [@Luz Izq, @Luz Der]
                   @Luz Izq: ON ^LeftLight; Z16    ---> S8
                   @Luz Der: ON ^RightLight; Z17      ---> S8


S12,                                                                     \  PERFIL 3
                                                                         \  segun simulaciones, con este protocolo hay una alternancia del 100%
                                                                         \  se elije al azar por que puerto se comienza y a partir de ahi se fuerza la alternancia
0.01":RANDI Q = P;
        IF Q = 1 [@Luz Izq, @Luz Der]
                   @Luz Izq: ON ^LeftLight; Z16  ---> S13
                   @Luz Der: ON ^RightLight; Z17 ---> S17

S13,
    #Z13: OFF ^LeftLight ---> S14
    #Z^Z_Incorrect: OFF ^LeftLight ---> S14


S14,
  0.01":  IF A(^TimeOut) > 0 [@True, @False]
            @True: ---> S15
            @False: ---> S16

S15,
#Z^Z_EndTimeOut: SET Q = 2;  Z17 ---> S17                  \ Si hay TO, se espera al fin del TO; si no hay, se espera MP





S16,
#Z12: SET Q = 2; Z17 ---> S17




S17,
D#T: ON ^RightLight ; Z19 ---> S18
#Z13: ADD B(3) ---> S19
#Z^Z_Incorrect: ADD B(3) ---> S19




S18,

#Z13: OFF ^RightLight ---> S19
#Z^Z_Incorrect: OFF ^RightLight ---> S19

S19,
 0.01":  IF A(^TimeOut) > 0 [@True, @False]
            @True: ---> S20
            @False: ---> S21


S20,

#Z^Z_EndTimeOut: SET Q = 1; Z16 ---> S22                                    \ Si hay TO, se espera al fin del TO; si no hay, se espera MP



S21,
#Z12: SET Q = 1; Z16 ---> S22


S22,
D#T : ON ^LeftLight ; Z18 ---> S13
#Z13: ADD B(3) ---> S14
#Z^Z_Incorrect: ADD B(3) ---> S14





\***********************************************************************
\    Cosas del SoftCR para los graficar el TO               que el trial que comenzÃ³ serÃ¡ de luz IZQUIERDA o DERECHA
\ o que se prendio la luz izq y derecha
\***********************************************************************

S.S.20,
S1,
  #START: IF A(^SoftCR) > 0 [@True, @False]
                @True: ---> S2
                @False: ---> SX
S2,
 #Z16: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.16, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> Sx
                             @False: ---> S1
                   @False: ---> S1

 #Z17: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.17, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> SX
                                @False: ---> S1

                     @False: ---> S1

 #Z18: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.18, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> Sx
                             @False: ---> S1
                   @False: ---> S1

 #Z19: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.19, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> SX
                                @False: ---> S1

                     @False: ---> S1





\***************************************************
\                   SESSION CLOCK
\***************************************************
S.S.21,
S1,
  #START: SHOW 1,Session,S/60 ---> S2

S2,
  1": ADD S; SHOW 1,Session,S/60;
      IF S/60 >= A(^SessionTime) [@EndSession, @ContinueTiming]
         @End: Z^Z_End ---> S3
         @Cont: ---> SX
  #Z^Z_End: ---> S3

S3,     \ Wait for Screen Update and end with
        \ STOPABORTFLUSH for Automatic Data Saving
  2": ---> STOPABORTFLUSH


