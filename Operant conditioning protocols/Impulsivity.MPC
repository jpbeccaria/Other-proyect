\Protocolo de IMPILSIVIDAD. Basado en Fixed Ratio V6
\
\Cambios de la versión 2.0:
\ Correción de los criterios de los Pause Time, Run Time, y Tiempo de latenica. Anteriormente, y de manera erronea, solo
\avanzaban si se realizaba un nose poke en un puerto instantaneo, se corrigió de manera que lo haga con hociqueos en ambos puertos.
\

\*************************************************************************************
\                     EXPLICACION DEL PROTOCOLO
\************************************************************************************
\

\    Fijar mediante la variable A(0) cual hole será el conciderado instantaneo, siendo 1 el izquierdo y 2 el derecho.
\De manera automática, el hole restante se asignará como hole delay (en términos del protocolo, E).
\    En este momento se puede cambiar ademas la cantidad de pellets que entregará el hole delay (por defecto 5, cambiar modificando N,
\tal como esta el protocolo escrito, 5 es el máximo); y si habrá o no delay (modificando la variable D, en segundos, por defecto 0!!!).
\    Una vez seteado esto, y con los ratones dentro de la jaula, iniciar el experimento.
\    Al iniciar la sesión, la caja mantendrá la luz general apagada, y la de ambos holes encendidas.
\    Si el animal hace un nose poke en el hole prefijado como instantaneo, recibirá inmediatamente un pellet en el magazine hole.
\Si el animal hace un NP el hole delay, recibira un nunero mayor de pellets (N).
\    Ahora, el cuando reciba dichos pellets dependerá del deley colocado. Si se mantiene el 0, inmediatamente recibira los N pellets,
\y mientras los recibe, en lo que dura esa acción por el aparato, se prende la luz de general de la jaula.
\Este protocolo con deley 0 es usado para fomentar la preferencia de los animales por este hole, en las primeras seciones de impusividad.
\    En cambio si se fija un delay mayor, la luz de la jaula se prenderá durante el tiempo que dure el delay, se recopilarán los NP que el raton
\haga durante este retrazo (ver matriz B), pero dichos NP no tendran consecuencias. Pasado el delay, la luz general se apaga, y se entregan los pellets.
\    Una vez entregada una recomenza, independientemente de si llegó por el hole inst. o delay y del delay elegido, ocurre un TO de 25 segundos
\con prendido de la luz general. Nuevamente los NP que haga el animal durante este tiempo seran guardados, en posiciones diferentes de la matriz B que durante el delay. Este TO es muy importante. Con anterioridad observamos
\que en su ausencia, los animales no tienden a preferir el hole que da mayor recompenza. En cambio si la decicion tomada tiene consecuencias a un mediano plazo,
\como es el agregado de ester TO luego un NP, vimos que lleva a  un aumento en la preferencia del Hole delay.
\    El protocolo dura 50 pellets o 60 minutos (ver matriz A en caso de querer modificarlo)
\
\


\*************************************************************************************
\             COSAS IMPORTANTES PARA CONFIGURAR EL PROTOCOLO!!
\************************************************************************************

\    D es el delay entre que hace NP en el Hole que va a tener Delay y recibe la recompenza
\Durante ese Delay, la luz de la caja esta prendida.
\    N es el numero de recompenzas que recibe si hace NP en el Hole con delay
\    A(0) INIDICA EL HOLE POR EL QUE VA A RECIBIR UNA RECOMPENZA INSTANTANEA!!!!! Por descarte,
\ automaticamnte el otro sera el hole delay.


\Basado en:
\ MEDLab8 Fixed Ratio.mpc
\

\ Inputs
^LHOLE  = 1
^RHOLE = 2
^HEAD = 3

\ Outputs
^Pellet     = 3
^LeftLight  = 1
^RightLight = 2
^HouseLight = 7



\ A() = Control Variables with Assigned Aliases as Defined
Var_Alias Hole Instantaneo  (1=Left  2=Right)      = A(0)  \ Default = 1-Left NOSE POKE
Var_Alias Reward (1=Pellet  2=Dipper  3=Drug) = A(1)  \ Default = 1-Pellet
Var_Alias Reward Time (sec)                   = A(2)  \ Default = 0.05 seconds
Var_Alias Time Out Following Reward (sec)     = A(3)  \ Default = 0 seconds
Var_Alias Session Time (min)                  = A(4)  \ Default = 60 minutes
Var_Alias Fixed Ratio Value                   = A(5)  \ Default = 1
Var_Alias Maximum Reinforcers                 = A(6)  \ Default = 50
Var_Alias SoftCR Data Array (1=Yes  0=No)     = A(7)  \ Default = 1-Yes

\ Constants for Control Variables Array
^HInst   = 0
^Reward       = 1
^RewardTime   = 2
^TimeOut      = 3
^SessionTime  = 4
^FRVal        = 5
^MaxReinf     = 6
^SoftCR       = 7
^RewTimeTicks = 8
^TimeOutTicks = 9


\ List Data Variables Here
\  B() = Trial Data
\  B(0)   = Total Responses
\  B(1)   = Total Respuestas en el Hole Inst.
\  B(2)   = Total Respuestas en el Hole Delay.
\  B(3)   = % Hole Inst
\  B(4)   = % Hole Delay
\  B(J)   = Trial Number
\  B(J+1) = Respuestas en el Hole Inst.
\  B(J+2) = Respuestas en el Hole Delay.
\  B(J+3) = Pause Time (sec)
\  B(J+4) = Run Time (sec)
\  B(J+5) = Latencia entre que recibe recompenza y que la va a buscar
\  B(J+6) = NP en el Hole Inst durante el delay
\  B(J+7) = NP en el Hole Delay durante el delay
\  B(J+8) = NP en el Hole Inst Durante el Time out
\  B(J+9) = NP en el Hole Delay Durante el Time out
\
\
\  C() = IRT Array and Event Pen Code for Soft Cum. Recorder
\  F   = Total Rewards
\  S   = Elapsed Time in Session


\ List Working Variables Here
\  I = Subscript for the IRT Array C
\  J = Subscript for the Trial Array B
\  L = Ratio Count
\  T = Elapsed Time in 0.01 sec Increments for SoftCR Data
\  X = Trial Counter
\  Y = Fixed Ratio Used by Program
\        Updates to new value at START and following Reinforcement



\G = Contador de NPs en el hole inst durante el delay
\K = Contador de NPs en el hole delay durante el delay

\ D = Delay entre el NP en el HDelay y la recompenza, por defecto es 0
\ N = Numero de recompenzas que da el hole delay, por defecto es 5



DIM A = 9
DIM B = 1000
^CArraySize = 10000  \ Change this Variable also when modifying the C array size.
DIM C = 10000  \ Dimension Array C for 10001 data points.
               \ Under MED-PC Version IV, this array may be
               \ enlarged up to 1 million elements; however,
               \ 10,000 was felt to be adequate for this application.
               \ An end of array seal -987.987 will limit the saved
               \ file to only those elements used during the running
               \ of the procedure.

\   CODIGO PARA INTERPRETAR LA MATRIZ C Y LOS GRAFICOS DEL SOFTCR (decimal en la matriz C; significado; color standar)
\  .10 = NP Instantaneo             ; rojo
\  .11 = NP Delay                   ; naranja
\  .12 = NP en Magazine hole        ; azul
\  .13 = NPInst durante Delay       ; violeta
\  .14 = NPDelay durante Delay      ; rojo oscuro/ bordó
\  .15 = NPInst durante TO          ; amarillo amarronado
\  .16 = NPDelay durante TO         ; celeste verdoso
\
\   .60  ; Inicio de Delay ; Se lo ve en evento 1 del SoftCR como un incremento respecto a la linea de base
\   .50  ; Fin del Delay ; retorno a la linea de base
\   .61  ; Inicio de TimeOut ; Se lo ve en evento 2 del SoftCR como un incremento respecto a la linea de base
\   .51  ; Fin del TimeOut ; retorno a la linea de base

\ Z-Pulses Used in this Program
^Z_Pellet     = 1   \ Signal Pellet Reinforcement
^Z_Dipper     = 2   \ Signal Dipper Reinforcement
^Z_Pump       = 3   \ Signal Pump Reinforcement
^Z_HInst      = 4   \ Signal Correct Response
^Z_HDelay     = 5   \ Signal Incorrect Response
^Z_EndTimeOut = 6   \ Signal End of Time Out

^Z_TimeOutON  = 16  \ Señal de inicio del Time Out
^Z_TimeOutOFF = 17  \ Señal de fin del Time Out
^Z_NPInstTO   = 18
^Z_NPDelayTO  = 19


\ Z9  Señaliza cuando hace un NP instant durante el delay
\ Z10 Señaliza cuando hace un NP delay durante el delay.
\ Z12 Señaliza los Magazine pokes
\ Z13 y Z14 Para graficar los deley en el SoftCR
\ Z15 Señaliza recompenza proveniente de Hole delay para el SoftCR
^Z_End        = 32  \ Signal End of Session


DISKCOLUMNS = 5



\***************************************************
\           MEDLab8 Fixed Ratio Schedule
\  S1 - Set Default Values
\       Correct Lever              (1-Left)
\       Reward Device              (1-Pellet)
\       Reward Time                (0.05 seconds)
\       Time Out Following Reward  (0 seconds)
\       Session Time               (60 minutes)
\       Fixed Ratio Value          (1)
\       Maximum Reinforcers        (50)
\       SoftCR Activation          (1-Yes)
\***************************************************
S.S.1,
S1,
  0.01": SET A(^HInst) = 1,  A(^Reward)           = 1,  A(^RewardTime) = 0.05;
         SET A(^TimeOut)    = 0,  A(^SessionTime) = 60, A(^FRVal)      = 1;
         SET A(^MaxReinf)   = 50, A(^SoftCR)      = 1;  SET D = 0; SET N = 5;


         SET J = 5, B(J)    = -987.987 ---> S2

S2,     \ First Statement: Wait for START signal, turn HouseLight
        \ and associated stimulus ON.
        \
        \ Second Statement: Update screen display with default values
        \ for Control Variables.  This will show any changes made via
        \ the "Configure | Change Variables" Window prior to START.
  #START: CLEAR 1,200;
          SET A(^RewTimeTicks) = A(^RewardTime) * 1";
          SET A(^TimeOutTicks) = A(^TimeOut)    * 1";
          ADD X; SET B(J) = X, B(J+10) = -987.987;
          SET Y = A(^FRVal);   SET D = D * 1";
          ON  ^LeftLight, ^RightLight; IF A(^HInst)= 1 [@Verdadero, @Falso]
                                                                      @Verdadero: SET E = 2 ---> S3
                                                                      @Falso:     SET E = 1 ---> S3


  1": SHOW 1,Hole Inst,A(^HInst), 2 , Delay , D , 3,Reward Device,A(^Reward),     4,Reward Time,A(^RewardTime);
      SHOW 5,Time Out,A(^TimeOut),         6,Session Time,A(^SessionTime), 7,FR Value,A(^FRVal);
      SHOW 8,Max Reinforcers,A(^MaxReinf), 9,SoftCR Code,A(^SoftCR) ---> SX






S3,


  #RA(^HInst): Z^Z_HInst;  ZA(^Reward); Z^Z_Pellet ---> S5

  #RE: Z^Z_HDelay; IF D = 0 [@Verdadero, @Falso]
                                @Verdadero: ON ^HouseLight ---> S20
                                @Falso: ON ^HouseLight; Z13 ---> S19

  #Z^Z_End: ---> S7


  S5,   \ Time Out Interval Following Reward
        \ Reset FR working variable "Y."  This allows the User
        \ to change the value of "A(^FRVal)" while the Animal is
        \ running and have the new value take effect after the
        \ current Ratio is reached.
  A(^TimeOutTicks)#T: Z^Z_EndTimeOut;
                      IF F >= A(^MaxReinf) [@End, @Cont]
                         @End: Z^Z_End ---> S7
                         @Cont: ADD X; SET J = J + 10, B(J) = X, B(J+10) = -987.987; z17;
                                SET Y = A(^FRVal) ---> S21
  #Z^Z_End: ---> S7

S6,


S7,     \ End of Session - Turn Lights Off
        \ Calculate % Correct and % Incorrect
  3": OFF ^HouseLight, ^LeftLight, ^RightLight;
         IF B(0) = 0 [@NoCalc, @Calculate]
            @NoCalc: ---> S8
            @Calculate: SET B(3) = B(1) / B(0) * 100;
                        SET B(4) = B(2) / B(0) * 100 ---> S8

S8,     \ Holding State at End of Session
  1': ---> SX




S9,
    0.1": ON ^Pellet ; Z15---> S10
S10,
    0.1": OFF ^Pellet --->   S11

S11,

    0.4": ON ^Pellet; Z15 ---> S12
S12,
   0.1": OFF ^Pellet --->   S13

S13,
    0.4":  ON ^Pellet; Z15 ---> S14
S14,
   0.1": OFF ^Pellet; OFF ^HouseLight --->   S15

S15,
    0.4":  ON ^Pellet; Z15 ---> S16
S16,
   0.1": OFF ^Pellet --->   S17

S17,
    0.4": ON ^Pellet; Z15 ---> S18
S18,
    0.1": OFF ^Pellet; IF D = 0 [@Verdadero, @Falso]
                            @Verdadero: z16 ---> S5   \ACA habia antes un OFF ^HouseLight, como quiero que el flash de luz en caso de no delay dure un segundo, lo subi a mas arriba, pero deberia cambiarse a aca en caso de cambiar y que no sean 5 recompenzas ahora
                            @Falso: z16---> S5
S19,

    D#T: OFF ^HouseLight; Z14 ---> S20

    #RA(^HInst): Z9  ---> SX
    #RE: Z10 ---> SX

S20,
0.01": IF N = 5 [@VErdadero, @Falso]
                @Verdadero: ---> S9
                @Falso: IF N = 4 [@VErdadero, @Falso]
                            @Verdadero: ---> S11
                            @Falso: IF N = 3 [@VErdadero, @Falso]
                                    @Verdadero: ---> S13
                                    @Falso: IF N = 2 [@VErdadero, @Falso]
                                            @Verdadero: ---> S15
                                            @Falso: ---> S17

S21,
0.01": ON ^HouseLight; Z^Z_TimeOutON ---> S22

S22,

25": OFF ^HouseLight; Z^Z_TimeOutOFF ---> S3

#RA(^HInst):  Z^Z_NPInstTO;  ADD B(J+8) ---> SX
#RE:    Z^Z_NPDelayTO;        ADD B(J+9) ---> SX



\***************************************************
\            CONTADOR DE NP EN EL HOLE INSTANT
\***************************************************
S.S.2,
S1,
  #START: ---> S2

S2,
  #Z^Z_HInst: ADD B(0), B(1), B(J+1) ---> SX
  #Z^Z_End: ---> S1


\***************************************************
\           CONTADOR DE NP EN EL HOLE DELEY
\***************************************************
S.S.3,
S1,
  #START: ---> S2

S2,
  #Z^Z_HDelay: ADD B(0), B(2), B(J+2) ---> SX
  #Z^Z_End: ---> S1


\***************************************************
\                  REWARD COUNTER
\***************************************************
S.S.4,
S1,
  #START: ---> S2

S2,
  #ZA(^Reward): ADD F ---> SX
  #Z15: ADD F ---> SX
  #Z^Z_End: ---> S1


\***************************************************
\               REWARD CONTROL TIMER
\***************************************************
S.S.5,
S1,
  #Z^Z_Pellet: ON ^Pellet ---> S2


S2,     \ Time Reward Device for A(^RewardTime) seconds
        \ Default value set in S.S.1, S1 & S2
  A(^RewardTime)#T: OFF ^Pellet,  ---> S1
  #Z^Z_End:           OFF ^Pellet,  ---> S1


\***************************************************
\             PAUSE AND RUN TIME TIMING
\***************************************************
S.S.6,
S1,
  #START: ---> S2

S2,     \ Run Time Starts with the first Correct Lever Press
  #RA(^HInst): ---> S3
  #RE: --->S3
S3,     \ Run Time is the amount of time from the first Correct
        \ Lever Press to the last Correct Lever Press when the FR
        \ has been met
        \ With an FR1 this would give a Run Time of 0s
  1": ADD B(J+4) ---> S3
  #Z^Z_End:      ---> S1
  #ZA(^Reward):  ---> S4
  #Z15: ---> S4
S4,     \ Pause Time begins when the Reward has been issued
        \
        \ Wait for the Time Out Interval Following Reward to finish
  1": ADD B(J+3)   ---> S4
  #Z^Z_End:        ---> S1
  #Z^Z_EndTimeOut: ---> S5

S5,     \ Pause Time ends with the first Correct Lever Press
        \ after the Time Out Interval Following Reward
  #RA(^HInst): ---> S3
  #RE: ---> S3
  1": ADD B(J+3)    ---> S5
  #Z^Z_End:         ---> S1

\**************************************************************************
\   Latencia entre que recibe la recompenza y lo va a buscar  by Juan P
\**************************************************************************


S.S. 7

S1,
    #START: ---> S2

S2,
  \ #ZA(^Reward): ---> S3

    #z17: ---> S3
S3,

   1": ADD B(J+5) ---> S3
    #Z12:     ---> S2
  \  #z17: ---> S4
  \ #ZA(^Reward): ---> S4
  \#z16: ---> s4

    #Z^Z_End: ---> S1
\S4,
 \   0.5": SET B(J+5) = B(J-5)---> S3




\***************************************************
\     INCREMENT TIME T FOR IRT AND EVENT ARRAY
\***************************************************
S.S.8,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  0.01": ADD T ---> SX
  #Z^Z_End: ---> S1


\***********************************************************
\ ADD A STEP 0 ELEMENT TO ARRAY C FOR EACH Instant RESPONSE
\***********************************************************
S.S.9,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z^Z_HInst: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.10, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


\***************************************************
\  ADD A PIP 0 ELEMENT TO ARRAY C FOR EACH REWARD
\***************************************************
S.S.10,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #ZA(^Reward): IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.20, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


\***************************************************************
\ ADD AN EVENT 0 ELEMENT TO ARRAY C FOR EACH Delay RESPONSE
\       ADDITIONAL EVENT ELEMENTS MAY BE ADDED AS NEEDED
\***************************************************************
S.S.11,

S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z^Z_HDelay: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.11, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1



\Algo viejo del protocolo original, donde hacer NP en el hole "erroneo" se graficaba asi: __|___|||__|__||____
\S1,
\  #START: IF A(^SoftCR) > 0 [@ActivateSoftCR, @NoSoftCR]
\             @ActSoftCR: SET C(I) = 0.50, I = I + 1, C(I) = -987.987 ---> S2
\             @NoSoftCR:  SET C(0) = -987.987 ---> SX  \ Seal Array
\
\S2,     \ Raising and lowering the Event line immediately
\        \ will create a pip mark on the Event line
\  #Z^Z_HDelay: IF I <= ^CArraySize [@True, @False]
\                     @True: SET C(I) = T + 0.60, T = 0; ADD I;
\                            IF I <= ^CArraySize [@True, @False]
\                               @True: SET C(I) = 0.50; ADD I;
\                                      IF I <= ^CArraySize [@True, @False]
\                                         @True: SET C(I) = -987.987 ---> SX
\                                         @False:---> S1
\                               @False:---> S1
\                     @False:---> S1


\****************************************************
\ ADD AN EVENT 1 ELEMENT TO ARRAY C FOR THE TIME OUT
\***************************************************
\Esta seccion tambien quedo del protocolo original que trajo la empresa. El TO del que habla NO es el que usamos nosotros

S.S.12,
S1,
  #START: IF A(^SoftCR) > 0 [@ActivateSoftCR, @NoSoftCR]
             @ActSoftCR: SET C(I) = 0.51, I = I + 1, C(I) = -987.987;
                         IF A(^TimeOut) = 0 [@NoTimeOut, @Record]
                            @NoTimeOut: ---> SX
                            @Record:    ---> S2
             @NoSoftCR: ---> SX

S2,     \ Reward was issued.  Time Out Begins
        \ Set Event Pen 1 Up
  #ZA(^Reward): IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.61, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> S3
                             @False: ---> S1
                   @False: ---> S1

S3,     \ Time Out has Ended
        \ Set Event Pen 1 Down
  #Z^Z_EndTimeOut: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.51, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> S2
                                @False: ---> S1
                      @False: ---> S1


\***************************************************
\                  UPDATE DISPLAY
\***************************************************
S.S.13,
S1,
  #START: SHOW 2,Tot Inst Hole,B(1),  3,Tot Delay Hole,B(2), 4,Tot Rewards,F,   5,FR=,Y;
          SHOW 6,Trial #,B(J),      7,Instant Rsp,B(J+1),     8,Delay Rsp,B(J+2);
          SHOW 9,Pause Time,B(J+3), 10,Run Time,B(J+4), 11, Buscar Recomp, H ---> S2

S2,
  1": SHOW 2,Tot Inst Hole,B(1),  3,Tot Delay Hole,B(2), 4,Tot Rewards,F,   5,FR=,Y;
      SHOW 6,Trial #,B(J),      7,Instant Rsp,B(J+1),     8,Delay Rsp,B(J+2);
      SHOW 9,Pause Time,B(J+3), 10,Run Time,B(J+4), 11, Buscar Recomp, H ---> S2



\***************************************************
\        Contador de metidas de cabeza
\***************************************************

S.S.15,
S1,
#START: --->S2

S2,
 1#R3: ADD H; Z12 ---> S3
 1": SHOW 11, Buscar Recomp, H ---> SX

S3,
 0.15":---> S2


\***********************************************************************
\ ADD A PIP 0 ELEMENT TO ARRAY C FOR EACH HEAD ENTRY by Juan P
\***********************************************************************


S.S.16,

S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z12: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.12, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


\***********************************************************************
\    Contador de NP en ambos holes durante el delay
\***********************************************************************

S.S.17,
S1,
#START: ---> S2

S2,
#Z9: ADD G, B(J+6) ---> SX
#Z10: ADD K, B(J+7) ---> SX

1": SHOW 12, NP Inst delay, G, 13, NP Deley deley, K  ---> SX

 #Z^Z_End: ---> S1


\***********************************************************************
\    Cosas del SoftCR para los NP durante el delay
\***********************************************************************


S.S.18,

S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z9: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.13, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


S.S.19,

S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z10: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.14, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


\***********************************************************************
\    Cosas del SoftCR para  graficar el delay
\***********************************************************************

 S.S.20,
S1,
  #START: IF A(^SoftCR) > 0 [@ActivateSoftCR, @NoSoftCR]
             @ActSoftCR: SET C(I) = 0.50, I = I + 1, C(I) = -987.987 ---> S2
             @NoSoftCR: ---> SX

S2,

 #Z13: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.60, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> S3
                             @False: ---> S1
                   @False: ---> S1

S3,
  #Z14: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.50, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> S2
                                @False: ---> S1

                     @False: ---> S1

\***********************************************************************
\    Cosas del SoftCR para los NP durante el TO
\***********************************************************************

S.S.21,
S1,

  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z^Z_NPInstTO: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.15, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1


S.S.22,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z^Z_NPDelayTO: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.16, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> SX
                             @False: ---> S1
                   @False: ---> S1



\***********************************************************************
\    Cosas del SoftCR para los graficar el TO
\***********************************************************************

S.S.23,

S1,
  #START: IF A(^SoftCR) > 0 [@ActivateSoftCR, @NoSoftCR]
             @ActSoftCR: SET C(I) = 0.51, I = I + 1, C(I) = -987.987 ---> S2
             @NoSoftCR: ---> SX

S2,

 #Z^Z_TimeOutON: IF I <= ^CArraySize [@True, @False]
                   @True: SET C(I) = T + 0.61, T = 0; ADD I;
                          IF I <= ^CArraySize [@True, @False]
                             @True: SET C(I) = -987.987 ---> S3
                             @False: ---> S1
                   @False: ---> S1

S3,
  #Z^Z_Time OutOFF: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.51, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> S2
                                @False: ---> S1

                     @False: ---> S1


\***********************************************************************
\                   SESSION CLOCK
\***********************************************************************
S.S.24,
S1,
  #START: SHOW 1, Session, S/60 ---> S2

S2,
  1": ADD S; SHOW 1,Session,S/60;
      IF S/60 >= A(^SessionTime) [@EndSession, @ContinueTiming]
         @End: Z^Z_End ---> S3
         @Cont: ---> SX
  #Z^Z_End: ---> S3

S3,     \ Wait for Screen Update and end with
        \ STOPABORTFLUSH for Automatic Data Saving
  2": ---> STOPABORTFLUSH

